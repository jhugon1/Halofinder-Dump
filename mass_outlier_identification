"""
This script is designed to generate detailed visualizations that highlight outliers between two halo catalogs, 
specifically comparing results from two halo-finding algorithms: a single-snapshot approach ("Fast HaloFinder") 
and a multi-snapshot approach ("Rafa's HaloFinder"). The plots help identify discrepancies in the identified 
halos, particle distributions, and properties between the two catalogs.
"""

from os.path import join
import h5py as h5
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
from halofinder.config import HALOS_PATH

plt.inferno()

fast_halo_data_path_rafa_halos = "/spiff/jhugon/updated_halofinder_rafa_halos/halo_catalogue.h5"
fast_halo_data_path_rockstar_seeds = "/spiff/jhugon/updated_halofinder_data_rockstar_seeds/halo_catalogue.h5"

# SAMPLE_PATH = fast_halo_data_path_rafa_halos
SAMPLE_PATH = fast_halo_data_path_rockstar_seeds

with h5.File(HALOS_PATH, 'r') as hdf:
    Rafa_morb = hdf['Morb'][()]
    Rafa_hid = hdf['OHID'][()]

    mask = Rafa_morb > 0
    Rafa_morb = Rafa_morb[mask]
    Rafa_hid = Rafa_hid[mask]


with h5.File(SAMPLE_PATH, 'r') as sample_cat:
    fast_morb = sample_cat['Morb'][()]
    fast_hid = sample_cat['OHID'][()]
    target_hid = 2586181
    index = list(fast_hid).index(target_hid)
    print(f"Part Count {target_hid}: {fast_morb[index]/7.754657e+10}")
    print(len(Rafa_hid[np.isin(Rafa_hid, fast_hid)]))

def compute_radius(x, y, z):
    return np.sqrt(x**2 + y**2 + z**2)

def find_mass_ratio(
        fast_morb: np.ndarray,
        Rafa_morb: np.ndarray,
        fast_hid: np.ndarray,  # Add fast_hid as a parameter
        Rafa_hid: np.ndarray
) -> tuple[np.ndarray, np.ndarray, np.ndarray]:
    '''
    Calculates the log of the ratio of fast and Rafa morb values and returns the corresponding
    ln_ratio, Rafa_morb_match, and fast_hid values for matched halos.
    '''

    _, rafa_ind, fast_ind = np.intersect1d(Rafa_hid, fast_hid, return_indices=True)

    # Match and sort fast morb and fast HID arrays
    Rafa_morb_match = Rafa_morb[rafa_ind]
    fast_morb_match = fast_morb[fast_ind]
    fast_hid_match = fast_hid[fast_ind]
    Rafa_hid_match = Rafa_hid[rafa_ind]

    print(f"Len fast hid match: {len(fast_hid_match)}")
    print(f"Len Rafa hid Match: {len(Rafa_hid_match)}")

    ln_ratio = np.log(fast_morb_match / Rafa_morb_match)

    print(f"High Error Halo Count {len(fast_morb_match[np.where(np.abs(ln_ratio) > .5)])}")

    return ln_ratio, Rafa_morb_match, Rafa_hid_match, fast_hid_match

def mass_ratio_2dhist(
    ln_ratio: np.ndarray,
    Rafa_morb_match: np.ndarray,
    error_cutoff: float,
    sigma_line: np.ndarray
) -> None:
    """
    Plots a 2d histogram of the mass ratio log(Mfast/MRafa) across a massbin range

    Params:
        ln_ratio (array): of log(Mfast/MRafa)
        Rafa_morb_match (array): array of Rafa_morb for haloes contained in fast_morb
        error_cutoff (float): sets error limit for plot scaling
        simga_line (array): array of tuples corresponding to values of mean + 2 sigma and
                                    corresponding massbin values
    """
    mask = np.where(np.abs(ln_ratio) < error_cutoff)
    plt.hist2d(np.log10(Rafa_morb_match)[mask], ln_ratio[mask], bins = (100,100))
    y1 = sigma_line[:, 0]
    y2 = sigma_line[:, 1]
    x = sigma_line[:, 2]
    plt.plot(x, y1, 'red', label = "Mean + 2Sig")
    plt.plot(x, y2, 'red', label = "Mean - 2Sig")
    plt.xlabel('log10(Morb Rafa)')
    plt.xlim(right=14.75)
    plt.ylabel('ln(morb_fast/Rafa_morb)')
    plt.title('Mass Difference Percent Error - ln(Mfast/MRafa)')
    plt.legend(loc = "upper right")

    plot_name = '2sigma_fast_morb_error_plot.png'
    plt.savefig(plot_name)
    plt.close()

def mass_ratio_hist(
    ln_ratio: np.ndarray,
    Rafa_morb_match: np.ndarray,
    bin: tuple,
    error_cutoff: float,
    save_plots: bool
) -> tuple[float, float, float]:
    '''
    Plots a normalized histogram of the mass ratio log(Mfast/MRafa) at a massbin
    and fits a Gaussian within +- 2 Sigma of the histogram

    params:
        ln_ratio (array): of log(Mfast/MRafa)
        Rafa_morb_match (array): array of Rafa_morb for haloes contained in fast_morb
        bin (tuple): Mass bin to plot the histogram for
        error_cutoff (float): sets error limit for plot scaling
        save_plots (bool): boolean = True if desire to save plots as files

    returns:
        tuple of mean + 2sigma, mean-2sigma, average massbin value
    '''
    bin_mask = np.where(((np.log10(Rafa_morb_match) > bin[0]) & (np.log10(Rafa_morb_match) < bin[1])))
    ratio_bin = ln_ratio[bin_mask]

    m = np.median(ratio_bin)
    s = 1.4826*np.median(np.abs(ratio_bin - m))
    # "Cheap" Standard deviation based on median absolute deviation

    std_mask = np.where((ratio_bin > m-2*s) & (ratio_bin < m+2*s))
    std_bin = ratio_bin[std_mask] # Bin containing values within 2 sigma
    mean,std =norm.fit(std_bin) # Fit the gaussian to the downsampled bin

    # outlier_count = (np.abs(ratio_bin-mean)/std > 3).sum()
    # outlier_fraction = outlier_count/len(ratio_bin)  Fraction of haloes outside 3 sigma
    # print(f"Outlier Fraction {outlier_fraction}")
    error_mask = np.where(np.abs(ln_ratio[bin_mask]) < error_cutoff)

    x = np.linspace(-error_cutoff, error_cutoff, 1000) 
    y = norm.pdf(x, mean, std) # Fit gaussian across x data
    bin_size = 35
    plt.hist(ratio_bin[error_mask], bins = bin_size, density = True)
              # label = f"Fraction > 3*Std: {'%.1f'%(100*outlier_fraction)}%")
    plt.plot(x, y, label = f"Mean: {'%.3f'%mean} \n Std: {'%.3f'%std}")
    # plt.scatter(0, 0, s = 1, label = f"Halo Count: {len(ratio_bin)}") # Using this scatter only to display halo count on the plot legend
    
    plt.xlabel('ln(Morb_Fast/Morb_Rafa)')
    plt.ylabel("Halo Count Normed")
    text = r'$log_{10}$'
    plt.title(f"Mass Difference Histogram --- Bin: {bin[0]} < {text}(Morb_Rafa) < {bin[1]}")
    plt.legend(loc = "upper right")
    plt.yticks([]) # Delete the y_ticks as histogram is normalized
    if save_plots:
        plot_name = "ratio_histogram.png"
        plt.savefig(f'{bin}_{plot_name}')
    plt.close()

    # Create 2 Sigma line:
    return (-2*std+mean, 2*std+mean, (bin[0]+bin[1])/2)

def plot_density_vs_radius(fast_xyz: tuple[np.ndarray, np.ndarray, np.ndarray], 
                           Rafa_xyz: tuple[np.ndarray, np.ndarray, np.ndarray], 
                           labels=("Fast", "Rafa")):
    """
    Plots the density of orbiting particles as a function of radius for two datasets.

    Params:
        fast_xyz (tuple): (x, y, z) coordinates for the fast particles
        Rafa_xyz (tuple): (x, y, z) coordinates for the Rafa particles
        labels (tuple): Labels for the two datasets for legend (default: ("Fast", "Rafa"))
    """

    # Calculate radial distances for each dataset
    fast_r = compute_radius(*fast_xyz)
    Rafa_r = compute_radius(*Rafa_xyz)

    # Define radial bins
    bins = np.linspace(0, max(fast_r.max(), Rafa_r.max()), 100)  # 100 radial bins
    bin_centers = 0.5 * (bins[1:] + bins[:-1])

    # Compute histogram and density
    fast_counts, _ = np.histogram(fast_r, bins=bins)
    print(fast_counts)
    Rafa_counts, _ = np.histogram(Rafa_r, bins=bins)
    print(Rafa_counts)

    # Compute volume of each shell
    volumes = (4/3) * np.pi * (bins[1:]**3 - bins[:-1]**3)

    # Calculate density
    fast_density = fast_counts / volumes
    Rafa_density = Rafa_counts / volumes

    # Plot the density as a function of radius
    plt.figure(figsize=(8, 6))
    plt.plot(bin_centers, fast_density, label=f'{labels[0]} Density', marker='o', linestyle='-')
    plt.plot(bin_centers, Rafa_density, label=f'{labels[1]} Density', marker='s', linestyle='--')

    # Plot formatting
    plt.xlabel('Radial Distance r')
    plt.ylabel('Density of Orbiting Particles')
    plt.title('Density of Orbiting Particles vs. Radius')
    plt.legend()
    plt.grid(True)

    # Show the plot
    plt.savefig('/home/jhugon/halofinder/halofinder/morb_plots/rho_orb_v_rafa_mast.png')

# Sample usage

def make_full_histogram(Rafa_morb_match, ln_ratio, error_mask, mass_mask):
    plt.hist2d(np.log10(Rafa_morb_match)[error_mask][mass_mask], ln_ratio[error_mask][mass_mask], bins = (100,100))
    plot_name = '/home/jhugon/halofinder/halofinder/morb_plots/new_rock_seeds_hist.png'
    plt.savefig(plot_name)
    plt.close()
    
if __name__ == "__main__":

    ln_ratio, Rafa_morb_match, Rafa_hid_match, fast_hid_match = find_mass_ratio(fast_morb, Rafa_morb, fast_hid, Rafa_hid)
    error_mask = np.where(np.abs(ln_ratio) < 1000)
    # mass_mask = np.where(np.log10(Rafa_morb_match)[error_mask] > 13)
    # make_full_histogram(Rafa_morb_match, ln_ratio, error_mask, mass_mask)
    mass_mask = np.where(np.log10(Rafa_morb_match)[error_mask] > 14.5)

    # Scatter plot
    plt.scatter(np.log10(Rafa_morb_match)[error_mask][mass_mask], 
                ln_ratio[error_mask][mass_mask], s=10)

    # Apply second mask to highlight some halos
    x_data = np.log10(Rafa_morb_match)[error_mask][mass_mask]
    y_data = ln_ratio[error_mask][mass_mask]

    ymask_1 = []
    ymask_2 = []
    ymask_1 = ((y_data > 0.32) & (y_data < 1000))
    ymask_2 = ((y_data > -1000) & (y_data < -.38))
    second_error_mask = ymask_1
    second_error_mask = ymask_1 | ymask_2


    filtered_hids = Rafa_hid_match[error_mask][mass_mask]
    filtered_hids_second = filtered_hids[second_error_mask]

    x_data_second = x_data[second_error_mask]
    y_data_second = y_data[second_error_mask]

    colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#ff9966', '#cc99ff', '#66ffcc']
    letters = 'ABCDEFGHIJKLMNOPQRS'
    halo_to_letter_map = {}

    for i, txt in enumerate(filtered_hids_second):
        plt.scatter(x_data_second[i], y_data_second[i], s=500, 
                    color=colors[i % len(colors)], marker='*', edgecolor='white')
        plt.text(x_data_second[i], y_data_second[i], letters[i], 
                fontsize=8, ha='center', va='center', color='black', 
                rotation=0)
        halo_to_letter_map[int(txt)] = letters[i]

    legend_elements = [plt.Line2D([0], [0], marker='*', color='w', label=f'{halo_to_letter_map[int(txt)]}: HID {int(txt)}',
                                markerfacecolor=colors[i % len(colors)], markersize=10)
                    for i, txt in enumerate(filtered_hids_second)]

    plt.legend(handles=legend_elements, loc='upper right', title="Halo IDs", fancybox=True)
    plt.xlabel('log10(Morb Rafa)')
    plt.ylabel('ln(Morb_fast / Morb_Rafa)')
    plt.title('Mass Difference Percent Error - ln(Mfast/MRafa)', pad=20)
    plt.tight_layout(pad=2)
    plot_name = '/home/jhugon/halofinder/halofinder/morb_plots/rocksar_scatter_stars.png'
    plt.savefig(plot_name)
    plt.close()
